{"ast":null,"code":"import { UPLOAD_FILE_FAIL, UPLOAD_FILE_REQUEST, UPLOAD_FILE_SUCCESS, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT_SUCCESS, USER_PROFILE_FAIL, USER_PROFILE_REQUEST, USER_PROFILE_SUCCESS, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_UPDATE_FAIL, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS } from \"../actionsTypes\";\nimport axios from \"axios\";\nconst registerUserAction = userData => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: USER_REGISTER_REQUEST\n      });\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      };\n      const {\n        data\n      } = await axios.post('/user/register', userData, config);\n      console.log(userData);\n      dispatch({\n        type: USER_REGISTER_SUCCESS,\n        payload: data\n      });\n\n      //Save the user into localstorage\n      localStorage.setItem('userAuthData', JSON.stringify(data));\n    } catch (error) {\n      console.log('mongdb error', error);\n      dispatch({\n        type: USER_REGISTER_FAIL,\n        payload: error.response && error.response.data.message ? error.response.data.message : error.message\n      });\n    }\n  };\n};\n\n//Login action\n\nconst loginUserAction = (email, password) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: USER_LOGIN_REQUEST\n      });\n\n      //Make the actual\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const {\n        data\n      } = await axios.post('/user/login', {\n        email,\n        password\n      }, config);\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data\n      });\n      //Save the user into localstorage\n      localStorage.setItem('userAuthData', JSON.stringify(data));\n    } catch (error) {\n      dispatch({\n        type: USER_LOGIN_FAIL,\n        payload: error.response.data.message\n        // payload: error.response && error.response.data.message,\n      });\n    }\n  };\n};\n\n//Logout action\nconst logoutUserAction = () => async dispatch => {\n  try {\n    //Remove user from storage\n    localStorage.removeItem('userAuthData');\n    dispatch({\n      type: USER_LOGOUT_SUCCESS\n    });\n  } catch (error) {}\n};\n\n//profile action\nconst getUserProfileAction = () => {\n  return async (dispatch, getState) => {\n    // grab the user Token from store\n    const {\n      userInfo\n    } = getState().userLogin;\n    try {\n      dispatch({\n        type: USER_PROFILE_REQUEST\n      });\n      const config = {\n        headers: {\n          authorization: `tiendat ${userInfo.token}`\n        }\n      };\n      //make request\n      const {\n        data\n      } = await axios.get('/user/profile', config);\n      dispatch({\n        type: USER_PROFILE_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: USER_PROFILE_FAIL,\n        payload: error.response && error.response.data.message\n      });\n    }\n  };\n};\n//update user\nconst updateUser = userData => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: USER_UPDATE_REQUEST,\n        loading: true\n      });\n      // Get the token of the user from store because that's what our endpoint need\n      const {\n        userInfo\n      } = getState().userLogin;\n      console.log(userInfo.token);\n      //Create a config and pass to axios for authentication\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          authorization: `tiendat ${userInfo.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.put('/user/auth/update', userData, config);\n      dispatch({\n        type: USER_UPDATE_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: USER_UPDATE_FAIL,\n        payload: error.response && error.response.data.message ? error.response.data.message : error.message\n      });\n    }\n  };\n};\nexport { registerUserAction, loginUserAction, logoutUserAction, getUserProfileAction, updateUser };","map":{"version":3,"names":["UPLOAD_FILE_FAIL","UPLOAD_FILE_REQUEST","UPLOAD_FILE_SUCCESS","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT_SUCCESS","USER_PROFILE_FAIL","USER_PROFILE_REQUEST","USER_PROFILE_SUCCESS","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_UPDATE_FAIL","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","axios","registerUserAction","userData","dispatch","type","config","headers","data","post","console","log","payload","localStorage","setItem","JSON","stringify","error","response","message","loginUserAction","email","password","logoutUserAction","removeItem","getUserProfileAction","getState","userInfo","userLogin","authorization","token","get","updateUser","loading","put"],"sources":["D:/DAChuyenNganh/Libraly-System/MERN-libraly-online/Frontend/src/redux/actions/users/userAction.js"],"sourcesContent":["import { UPLOAD_FILE_FAIL, UPLOAD_FILE_REQUEST, UPLOAD_FILE_SUCCESS, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT_SUCCESS, USER_PROFILE_FAIL, USER_PROFILE_REQUEST, USER_PROFILE_SUCCESS, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_UPDATE_FAIL, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS } from \"../actionsTypes\";\r\nimport axios from \"axios\";\r\n\r\nconst registerUserAction = (userData) => {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch({\r\n                type: USER_REGISTER_REQUEST,\r\n            });\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                },\r\n            };\r\n\r\n            const { data } = await axios.post('/user/register',\r\n                userData,\r\n                config\r\n            );\r\n            console.log(userData);\r\n            dispatch({\r\n                type: USER_REGISTER_SUCCESS,\r\n                payload: data,\r\n            });\r\n\r\n            //Save the user into localstorage\r\n            localStorage.setItem('userAuthData', JSON.stringify(data));\r\n        } catch (error) {\r\n            console.log('mongdb error', error);\r\n            dispatch({\r\n                type: USER_REGISTER_FAIL,\r\n                payload:\r\n                    error.response && error.response.data.message\r\n                        ? error.response.data.message\r\n                        : error.message,\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\n//Login action\r\n\r\nconst loginUserAction = (email, password) => {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch({\r\n                type: USER_LOGIN_REQUEST,\r\n            });\r\n\r\n            //Make the actual\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            };\r\n\r\n            const { data } = await axios.post('/user/login',\r\n                { email, password },\r\n                config\r\n            );\r\n            dispatch({\r\n                type: USER_LOGIN_SUCCESS,\r\n                payload: data,\r\n            });\r\n            //Save the user into localstorage\r\n            localStorage.setItem('userAuthData', JSON.stringify(data));\r\n        } catch (error) {\r\n            dispatch({\r\n                type: USER_LOGIN_FAIL,\r\n                payload: error.response.data.message,\r\n                // payload: error.response && error.response.data.message,\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\n//Logout action\r\nconst logoutUserAction = () => async dispatch => {\r\n    try {\r\n        //Remove user from storage\r\n        localStorage.removeItem('userAuthData');\r\n        dispatch({\r\n            type: USER_LOGOUT_SUCCESS,\r\n        });\r\n    } catch (error) { }\r\n};\r\n\r\n//profile action\r\nconst getUserProfileAction = () => {\r\n    return async (dispatch, getState) => {\r\n        // grab the user Token from store\r\n        const { userInfo } = getState().userLogin;\r\n        try {\r\n            dispatch({\r\n                type: USER_PROFILE_REQUEST,\r\n            });\r\n            const config = {\r\n                headers: {\r\n                    authorization: `tiendat ${userInfo.token}`\r\n                }\r\n            };\r\n            //make request\r\n            const { data } = await axios.get('/user/profile', config);\r\n            dispatch({\r\n                type: USER_PROFILE_SUCCESS,\r\n                payload: data,\r\n            });\r\n        } catch (error) {\r\n            dispatch({\r\n                type: USER_PROFILE_FAIL,\r\n                payload: error.response && error.response.data.message,\r\n            });\r\n        }\r\n    }\r\n}\r\n//update user\r\nconst updateUser = (userData) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({\r\n                type: USER_UPDATE_REQUEST,\r\n                loading: true,\r\n            });\r\n            // Get the token of the user from store because that's what our endpoint need\r\n            const { userInfo } = getState().userLogin;\r\n            console.log(userInfo.token);\r\n            //Create a config and pass to axios for authentication\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                    authorization: `tiendat ${userInfo.token}`,\r\n                },\r\n            };\r\n            const { data } = await axios.put('/user/auth/update',userData, config);\r\n            dispatch({\r\n                type: USER_UPDATE_SUCCESS,\r\n                payload: data,\r\n            });\r\n        } catch (error) {\r\n            dispatch({\r\n                type: USER_UPDATE_FAIL,\r\n                payload:\r\n                    error.response && error.response.data.message\r\n                        ? error.response.data.message\r\n                        : error.message,\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\n\r\nexport { registerUserAction, loginUserAction, logoutUserAction, getUserProfileAction, updateUser };"],"mappings":"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"},"metadata":{},"sourceType":"module"}