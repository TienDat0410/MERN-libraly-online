{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) : typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) : (global = global || self, factory(global.ReactStripe = {}, global.React));\n})(this, function (exports, React) {\n  'use strict';\n\n  React = React && Object.prototype.hasOwnProperty.call(React, 'default') ? React['default'] : React;\n  function createCommonjsModule(fn, module) {\n    return module = {\n      exports: {}\n    }, fn(module, module.exports), module.exports;\n  }\n\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n  var ReactPropTypesSecret_1 = ReactPropTypesSecret;\n  function emptyFunction() {}\n  function emptyFunctionWithReset() {}\n  emptyFunctionWithReset.resetWarningCache = emptyFunction;\n  var factoryWithThrowingShims = function factoryWithThrowingShims() {\n    function shim(props, propName, componentName, location, propFullName, secret) {\n      if (secret === ReactPropTypesSecret_1) {\n        // It is still safe when called from React.\n        return;\n      }\n      var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');\n      err.name = 'Invariant Violation';\n      throw err;\n    }\n    shim.isRequired = shim;\n    function getShim() {\n      return shim;\n    }\n    // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n\n    var ReactPropTypes = {\n      array: shim,\n      bool: shim,\n      func: shim,\n      number: shim,\n      object: shim,\n      string: shim,\n      symbol: shim,\n      any: shim,\n      arrayOf: getShim,\n      element: shim,\n      elementType: shim,\n      instanceOf: getShim,\n      node: shim,\n      objectOf: getShim,\n      oneOf: getShim,\n      oneOfType: getShim,\n      shape: getShim,\n      exact: getShim,\n      checkPropTypes: emptyFunctionWithReset,\n      resetWarningCache: emptyFunction\n    };\n    ReactPropTypes.PropTypes = ReactPropTypes;\n    return ReactPropTypes;\n  };\n  var propTypes = createCommonjsModule(function (module) {\n    /**\n     * Copyright (c) 2013-present, Facebook, Inc.\n     *\n     * This source code is licensed under the MIT license found in the\n     * LICENSE file in the root directory of this source tree.\n     */\n    {\n      // By explicitly using `prop-types` you are opting into new production behavior.\n      // http://fb.me/prop-types-in-prod\n      module.exports = factoryWithThrowingShims();\n    }\n  });\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) {\n        symbols = symbols.filter(function (sym) {\n          return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n      }\n      keys.push.apply(keys, symbols);\n    }\n    return keys;\n  }\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n    return target;\n  }\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n    return _typeof(obj);\n  }\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n  }\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n  function _iterableToArrayLimit(arr, i) {\n    var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for (var i = 0, arr2 = new Array(len); i < len; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var usePrevious = function usePrevious(value) {\n    var ref = React.useRef(value);\n    React.useEffect(function () {\n      ref.current = value;\n    }, [value]);\n    return ref.current;\n  };\n  var isUnknownObject = function isUnknownObject(raw) {\n    return raw !== null && _typeof(raw) === 'object';\n  };\n  var isPromise = function isPromise(raw) {\n    return isUnknownObject(raw) && typeof raw.then === 'function';\n  }; // We are using types to enforce the `stripe` prop in this lib,\n  // but in an untyped integration `stripe` could be anything, so we need\n  // to do some sanity validation to prevent type errors.\n\n  var isStripe = function isStripe(raw) {\n    return isUnknownObject(raw) && typeof raw.elements === 'function' && typeof raw.createToken === 'function' && typeof raw.createPaymentMethod === 'function' && typeof raw.confirmCardPayment === 'function';\n  };\n  var PLAIN_OBJECT_STR = '[object Object]';\n  var isEqual = function isEqual(left, right) {\n    if (!isUnknownObject(left) || !isUnknownObject(right)) {\n      return left === right;\n    }\n    var leftArray = Array.isArray(left);\n    var rightArray = Array.isArray(right);\n    if (leftArray !== rightArray) return false;\n    var leftPlainObject = Object.prototype.toString.call(left) === PLAIN_OBJECT_STR;\n    var rightPlainObject = Object.prototype.toString.call(right) === PLAIN_OBJECT_STR;\n    if (leftPlainObject !== rightPlainObject) return false; // not sure what sort of special object this is (regexp is one option), so\n    // fallback to reference check.\n\n    if (!leftPlainObject && !leftArray) return left === right;\n    var leftKeys = Object.keys(left);\n    var rightKeys = Object.keys(right);\n    if (leftKeys.length !== rightKeys.length) return false;\n    var keySet = {};\n    for (var i = 0; i < leftKeys.length; i += 1) {\n      keySet[leftKeys[i]] = true;\n    }\n    for (var _i = 0; _i < rightKeys.length; _i += 1) {\n      keySet[rightKeys[_i]] = true;\n    }\n    var allKeys = Object.keys(keySet);\n    if (allKeys.length !== leftKeys.length) {\n      return false;\n    }\n    var l = left;\n    var r = right;\n    var pred = function pred(key) {\n      return isEqual(l[key], r[key]);\n    };\n    return allKeys.every(pred);\n  };\n  var extractAllowedOptionsUpdates = function extractAllowedOptionsUpdates(options, prevOptions, immutableKeys) {\n    if (!isUnknownObject(options)) {\n      return null;\n    }\n    return Object.keys(options).reduce(function (newOptions, key) {\n      var isUpdated = !isUnknownObject(prevOptions) || !isEqual(options[key], prevOptions[key]);\n      if (immutableKeys.includes(key)) {\n        if (isUpdated) {\n          console.warn(\"Unsupported prop change: options.\".concat(key, \" is not a mutable property.\"));\n        }\n        return newOptions;\n      }\n      if (!isUpdated) {\n        return newOptions;\n      }\n      return _objectSpread2(_objectSpread2({}, newOptions || {}), {}, _defineProperty({}, key, options[key]));\n    }, null);\n  };\n  var INVALID_STRIPE_ERROR = 'Invalid prop `stripe` supplied to `Elements`. We recommend using the `loadStripe` utility from `@stripe/stripe-js`. See https://stripe.com/docs/stripe-js/react#elements-props-stripe for details.'; // We are using types to enforce the `stripe` prop in this lib, but in a real\n  // integration `stripe` could be anything, so we need to do some sanity\n  // validation to prevent type errors.\n\n  var validateStripe = function validateStripe(maybeStripe) {\n    if (maybeStripe === null || isStripe(maybeStripe)) {\n      return maybeStripe;\n    }\n    throw new Error(INVALID_STRIPE_ERROR);\n  };\n  var parseStripeProp = function parseStripeProp(raw) {\n    if (isPromise(raw)) {\n      return {\n        tag: 'async',\n        stripePromise: Promise.resolve(raw).then(validateStripe)\n      };\n    }\n    var stripe = validateStripe(raw);\n    if (stripe === null) {\n      return {\n        tag: 'empty'\n      };\n    }\n    return {\n      tag: 'sync',\n      stripe: stripe\n    };\n  };\n  var ElementsContext = /*#__PURE__*/React.createContext(null);\n  ElementsContext.displayName = 'ElementsContext';\n  var parseElementsContext = function parseElementsContext(ctx, useCase) {\n    if (!ctx) {\n      throw new Error(\"Could not find Elements context; You need to wrap the part of your app that \".concat(useCase, \" in an <Elements> provider.\"));\n    }\n    return ctx;\n  };\n  var CartElementContext = /*#__PURE__*/React.createContext(null);\n  CartElementContext.displayName = 'CartElementContext';\n  var parseCartElementContext = function parseCartElementContext(ctx, useCase) {\n    if (!ctx) {\n      throw new Error(\"Could not find Elements context; You need to wrap the part of your app that \".concat(useCase, \" in an <Elements> provider.\"));\n    }\n    return ctx;\n  };\n  /**\n   * The `Elements` provider allows you to use [Element components](https://stripe.com/docs/stripe-js/react#element-components) and access the [Stripe object](https://stripe.com/docs/js/initializing) in any nested component.\n   * Render an `Elements` provider at the root of your React app so that it is available everywhere you need it.\n   *\n   * To use the `Elements` provider, call `loadStripe` from `@stripe/stripe-js` with your publishable key.\n   * The `loadStripe` function will asynchronously load the Stripe.js script and initialize a `Stripe` object.\n   * Pass the returned `Promise` to `Elements`.\n   *\n   * @docs https://stripe.com/docs/stripe-js/react#elements-provider\n   */\n\n  var Elements = function Elements(_ref) {\n    var rawStripeProp = _ref.stripe,\n      options = _ref.options,\n      children = _ref.children;\n    var parsed = React.useMemo(function () {\n      return parseStripeProp(rawStripeProp);\n    }, [rawStripeProp]);\n    var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      cart = _React$useState2[0],\n      setCart = _React$useState2[1];\n    var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      cartState = _React$useState4[0],\n      setCartState = _React$useState4[1]; // For a sync stripe instance, initialize into context\n\n    var _React$useState5 = React.useState(function () {\n        return {\n          stripe: parsed.tag === 'sync' ? parsed.stripe : null,\n          elements: parsed.tag === 'sync' ? parsed.stripe.elements(options) : null\n        };\n      }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      ctx = _React$useState6[0],\n      setContext = _React$useState6[1];\n    React.useEffect(function () {\n      var isMounted = true;\n      var safeSetContext = function safeSetContext(stripe) {\n        setContext(function (ctx) {\n          // no-op if we already have a stripe instance (https://github.com/stripe/react-stripe-js/issues/296)\n          if (ctx.stripe) return ctx;\n          return {\n            stripe: stripe,\n            elements: stripe.elements(options)\n          };\n        });\n      }; // For an async stripePromise, store it in context once resolved\n\n      if (parsed.tag === 'async' && !ctx.stripe) {\n        parsed.stripePromise.then(function (stripe) {\n          if (stripe && isMounted) {\n            // Only update Elements context if the component is still mounted\n            // and stripe is not null. We allow stripe to be null to make\n            // handling SSR easier.\n            safeSetContext(stripe);\n          }\n        });\n      } else if (parsed.tag === 'sync' && !ctx.stripe) {\n        // Or, handle a sync stripe instance going from null -> populated\n        safeSetContext(parsed.stripe);\n      }\n      return function () {\n        isMounted = false;\n      };\n    }, [parsed, ctx, options]); // Warn on changes to stripe prop\n\n    var prevStripe = usePrevious(rawStripeProp);\n    React.useEffect(function () {\n      if (prevStripe !== null && prevStripe !== rawStripeProp) {\n        console.warn('Unsupported prop change on Elements: You cannot change the `stripe` prop after setting it.');\n      }\n    }, [prevStripe, rawStripeProp]); // Apply updates to elements when options prop has relevant changes\n\n    var prevOptions = usePrevious(options);\n    React.useEffect(function () {\n      if (!ctx.elements) {\n        return;\n      }\n      var updates = extractAllowedOptionsUpdates(options, prevOptions, ['clientSecret', 'fonts']);\n      if (updates) {\n        ctx.elements.update(updates);\n      }\n    }, [options, prevOptions, ctx.elements]); // Attach react-stripe-js version to stripe.js instance\n\n    React.useEffect(function () {\n      var anyStripe = ctx.stripe;\n      if (!anyStripe || !anyStripe._registerWrapper || !anyStripe.registerAppInfo) {\n        return;\n      }\n      anyStripe._registerWrapper({\n        name: 'react-stripe-js',\n        version: \"1.14.2\"\n      });\n      anyStripe.registerAppInfo({\n        name: 'react-stripe-js',\n        version: \"1.14.2\",\n        url: 'https://stripe.com/docs/stripe-js/react'\n      });\n    }, [ctx.stripe]);\n    return /*#__PURE__*/React.createElement(ElementsContext.Provider, {\n      value: ctx\n    }, /*#__PURE__*/React.createElement(CartElementContext.Provider, {\n      value: {\n        cart: cart,\n        setCart: setCart,\n        cartState: cartState,\n        setCartState: setCartState\n      }\n    }, children));\n  };\n  Elements.propTypes = {\n    stripe: propTypes.any,\n    options: propTypes.object\n  };\n  var useElementsContextWithUseCase = function useElementsContextWithUseCase(useCaseMessage) {\n    var ctx = React.useContext(ElementsContext);\n    return parseElementsContext(ctx, useCaseMessage);\n  };\n  var useCartElementContextWithUseCase = function useCartElementContextWithUseCase(useCaseMessage) {\n    var ctx = React.useContext(CartElementContext);\n    return parseCartElementContext(ctx, useCaseMessage);\n  };\n  /**\n   * @docs https://stripe.com/docs/stripe-js/react#useelements-hook\n   */\n\n  var useElements = function useElements() {\n    var _useElementsContextWi = useElementsContextWithUseCase('calls useElements()'),\n      elements = _useElementsContextWi.elements;\n    return elements;\n  };\n  /**\n   * @docs https://stripe.com/docs/stripe-js/react#usestripe-hook\n   */\n\n  var useStripe = function useStripe() {\n    var _useElementsContextWi2 = useElementsContextWithUseCase('calls useStripe()'),\n      stripe = _useElementsContextWi2.stripe;\n    return stripe;\n  };\n  /**\n   * @docs https://stripe.com/docs/payments/checkout/cart-element\n   */\n\n  var useCartElement = function useCartElement() {\n    var _useCartElementContex = useCartElementContextWithUseCase('calls useCartElement()'),\n      cart = _useCartElementContex.cart;\n    return cart;\n  };\n  /**\n   * @docs https://stripe.com/docs/payments/checkout/cart-element\n   */\n\n  var useCartElementState = function useCartElementState() {\n    var _useCartElementContex2 = useCartElementContextWithUseCase('calls useCartElementState()'),\n      cartState = _useCartElementContex2.cartState;\n    return cartState;\n  };\n  /**\n   * @docs https://stripe.com/docs/stripe-js/react#elements-consumer\n   */\n\n  var ElementsConsumer = function ElementsConsumer(_ref2) {\n    var children = _ref2.children;\n    var ctx = useElementsContextWithUseCase('mounts <ElementsConsumer>'); // Assert to satisfy the busted React.FC return type (it should be ReactNode)\n\n    return children(ctx);\n  };\n  ElementsConsumer.propTypes = {\n    children: propTypes.func.isRequired\n  };\n  var useCallbackReference = function useCallbackReference(cb) {\n    var ref = React.useRef(cb);\n    React.useEffect(function () {\n      ref.current = cb;\n    }, [cb]);\n    return function () {\n      if (ref.current) {\n        ref.current.apply(ref, arguments);\n      }\n    };\n  };\n  var noop = function noop() {};\n  var capitalized = function capitalized(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n  var createElementComponent = function createElementComponent(type, isServer) {\n    var displayName = \"\".concat(capitalized(type), \"Element\");\n    var ClientElement = function ClientElement(_ref) {\n      var id = _ref.id,\n        className = _ref.className,\n        _ref$options = _ref.options,\n        options = _ref$options === void 0 ? {} : _ref$options,\n        _ref$onBlur = _ref.onBlur,\n        onBlur = _ref$onBlur === void 0 ? noop : _ref$onBlur,\n        _ref$onFocus = _ref.onFocus,\n        onFocus = _ref$onFocus === void 0 ? noop : _ref$onFocus,\n        _ref$onReady = _ref.onReady,\n        onReady = _ref$onReady === void 0 ? noop : _ref$onReady,\n        _ref$onChange = _ref.onChange,\n        onChange = _ref$onChange === void 0 ? noop : _ref$onChange,\n        _ref$onEscape = _ref.onEscape,\n        onEscape = _ref$onEscape === void 0 ? noop : _ref$onEscape,\n        _ref$onClick = _ref.onClick,\n        onClick = _ref$onClick === void 0 ? noop : _ref$onClick,\n        _ref$onLoadError = _ref.onLoadError,\n        onLoadError = _ref$onLoadError === void 0 ? noop : _ref$onLoadError,\n        _ref$onLoaderStart = _ref.onLoaderStart,\n        onLoaderStart = _ref$onLoaderStart === void 0 ? noop : _ref$onLoaderStart,\n        _ref$onNetworksChange = _ref.onNetworksChange,\n        onNetworksChange = _ref$onNetworksChange === void 0 ? noop : _ref$onNetworksChange,\n        _ref$onCheckout = _ref.onCheckout,\n        onCheckout = _ref$onCheckout === void 0 ? noop : _ref$onCheckout,\n        _ref$onLineItemClick = _ref.onLineItemClick,\n        onLineItemClick = _ref$onLineItemClick === void 0 ? noop : _ref$onLineItemClick;\n      var _useElementsContextWi = useElementsContextWithUseCase(\"mounts <\".concat(displayName, \">\")),\n        elements = _useElementsContextWi.elements;\n      var elementRef = React.useRef(null);\n      var domNode = React.useRef(null);\n      var _useCartElementContex = useCartElementContextWithUseCase(\"mounts <\".concat(displayName, \">\")),\n        setCart = _useCartElementContex.setCart,\n        setCartState = _useCartElementContex.setCartState;\n      var callOnReady = useCallbackReference(onReady);\n      var callOnBlur = useCallbackReference(onBlur);\n      var callOnFocus = useCallbackReference(onFocus);\n      var callOnClick = useCallbackReference(onClick);\n      var callOnChange = useCallbackReference(onChange);\n      var callOnEscape = useCallbackReference(onEscape);\n      var callOnLoadError = useCallbackReference(onLoadError);\n      var callOnLoaderStart = useCallbackReference(onLoaderStart);\n      var callOnNetworksChange = useCallbackReference(onNetworksChange);\n      var callOnCheckout = useCallbackReference(onCheckout);\n      var callOnLineItemClick = useCallbackReference(onLineItemClick);\n      React.useLayoutEffect(function () {\n        if (elementRef.current == null && elements && domNode.current != null) {\n          var element = elements.create(type, options);\n          if (type === 'cart' && setCart) {\n            // we know that elements.create return value must be of type StripeCartElement if type is 'cart',\n            // we need to cast because typescript is not able to infer which overloaded method is used based off param type\n            setCart(element);\n          }\n          elementRef.current = element;\n          element.mount(domNode.current);\n          element.on('ready', function (event) {\n            if (type === 'cart') {\n              // we know that elements.on event must be of type StripeCartPayloadEvent if type is 'cart'\n              // we need to cast because typescript is not able to infer which overloaded method is used based off param type\n              if (setCartState) {\n                setCartState(event);\n              } // the cart ready event returns a CartStatePayload instead of the CartElement\n\n              callOnReady(event);\n            } else {\n              callOnReady(element);\n            }\n          });\n          element.on('change', function (event) {\n            if (type === 'cart' && setCartState) {\n              // we know that elements.on event must be of type StripeCartPayloadEvent if type is 'cart'\n              // we need to cast because typescript is not able to infer which overloaded method is used based off param type\n              setCartState(event);\n            }\n            callOnChange(event);\n          }); // Users can pass an onBlur prop on any Element component\n          // just as they could listen for the `blur` event on any Element,\n          // but only certain Elements will trigger the event.\n\n          element.on('blur', callOnBlur); // Users can pass an onFocus prop on any Element component\n          // just as they could listen for the `focus` event on any Element,\n          // but only certain Elements will trigger the event.\n\n          element.on('focus', callOnFocus); // Users can pass an onEscape prop on any Element component\n          // just as they could listen for the `escape` event on any Element,\n          // but only certain Elements will trigger the event.\n\n          element.on('escape', callOnEscape); // Users can pass an onLoadError prop on any Element component\n          // just as they could listen for the `loaderror` event on any Element,\n          // but only certain Elements will trigger the event.\n\n          element.on('loaderror', callOnLoadError); // Users can pass an onLoaderStart prop on any Element component\n          // just as they could listen for the `loaderstart` event on any Element,\n          // but only certain Elements will trigger the event.\n\n          element.on('loaderstart', callOnLoaderStart); // Users can pass an onNetworksChange prop on any Element component\n          // just as they could listen for the `networkschange` event on any Element,\n          // but only the Card and CardNumber Elements will trigger the event.\n\n          element.on('networkschange', callOnNetworksChange); // Users can pass an onClick prop on any Element component\n          // just as they could listen for the `click` event on any Element,\n          // but only the PaymentRequestButton will actually trigger the event.\n\n          element.on('click', callOnClick); // Users can pass an onCheckout prop on any Element component\n          // just as they could listen for the `checkout` event on any Element,\n          // but only certain Elements will trigger the event.\n\n          element.on('checkout', function (event) {\n            if (type === 'cart' && setCartState) {\n              // we know that elements.on event must be of type StripeCartPayloadEvent if type is 'cart'\n              // we need to cast because typescript is not able to infer which overloaded method is used based off param type\n              setCartState(event);\n            }\n            callOnCheckout(event);\n          }); // Users can pass an onLineItemClick prop on any Element component\n          // just as they could listen for the `lineitemclick` event on any Element,\n          // but only certain Elements will trigger the event.\n\n          element.on('lineitemclick', callOnLineItemClick);\n        }\n      });\n      var prevOptions = usePrevious(options);\n      React.useEffect(function () {\n        if (!elementRef.current) {\n          return;\n        }\n        var updates = extractAllowedOptionsUpdates(options, prevOptions, ['paymentRequest']);\n        if (updates) {\n          elementRef.current.update(updates);\n        }\n      }, [options, prevOptions]);\n      React.useLayoutEffect(function () {\n        return function () {\n          if (elementRef.current) {\n            elementRef.current.destroy();\n            elementRef.current = null;\n          }\n        };\n      }, []);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: id,\n        className: className,\n        ref: domNode\n      });\n    }; // Only render the Element wrapper in a server environment.\n\n    var ServerElement = function ServerElement(props) {\n      // Validate that we are in the right context by calling useElementsContextWithUseCase.\n      useElementsContextWithUseCase(\"mounts <\".concat(displayName, \">\"));\n      useCartElementContextWithUseCase(\"mounts <\".concat(displayName, \">\"));\n      var id = props.id,\n        className = props.className;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: id,\n        className: className\n      });\n    };\n    var Element = isServer ? ServerElement : ClientElement;\n    Element.propTypes = {\n      id: propTypes.string,\n      className: propTypes.string,\n      onChange: propTypes.func,\n      onBlur: propTypes.func,\n      onFocus: propTypes.func,\n      onReady: propTypes.func,\n      onEscape: propTypes.func,\n      onClick: propTypes.func,\n      onLoadError: propTypes.func,\n      onLoaderStart: propTypes.func,\n      onNetworksChange: propTypes.func,\n      onCheckout: propTypes.func,\n      onLineItemClick: propTypes.func,\n      options: propTypes.object\n    };\n    Element.displayName = displayName;\n    Element.__elementType = type;\n    return Element;\n  };\n  var isServer = typeof window === 'undefined';\n  /**\n   * Requires beta access:\n   * Contact [Stripe support](https://support.stripe.com/) for more information.\n   *\n   * @docs https://stripe.com/docs/stripe-js/react#element-components\n   */\n\n  var AuBankAccountElement = createElementComponent('auBankAccount', isServer);\n  /**\n   * @docs https://stripe.com/docs/stripe-js/react#element-components\n   */\n\n  var CardElement = createElementComponent('card', isServer);\n  /**\n   * @docs https://stripe.com/docs/stripe-js/react#element-components\n   */\n\n  var CardNumberElement = createElementComponent('cardNumber', isServer);\n  /**\n   * @docs https://stripe.com/docs/stripe-js/react#element-components\n   */\n\n  var CardExpiryElement = createElementComponent('cardExpiry', isServer);\n  /**\n   * @docs https://stripe.com/docs/stripe-js/react#element-components\n   */\n\n  var CardCvcElement = createElementComponent('cardCvc', isServer);\n  /**\n   * @docs https://stripe.com/docs/stripe-js/react#element-components\n   */\n\n  var FpxBankElement = createElementComponent('fpxBank', isServer);\n  /**\n   * @docs https://stripe.com/docs/stripe-js/react#element-components\n   */\n\n  var IbanElement = createElementComponent('iban', isServer);\n  /**\n   * @docs https://stripe.com/docs/stripe-js/react#element-components\n   */\n\n  var IdealBankElement = createElementComponent('idealBank', isServer);\n  /**\n   * @docs https://stripe.com/docs/stripe-js/react#element-components\n   */\n\n  var P24BankElement = createElementComponent('p24Bank', isServer);\n  /**\n   * @docs https://stripe.com/docs/stripe-js/react#element-components\n   */\n\n  var EpsBankElement = createElementComponent('epsBank', isServer);\n  var PaymentElement = createElementComponent('payment', isServer);\n  /**\n   * @docs https://stripe.com/docs/stripe-js/react#element-components\n   */\n\n  var PaymentRequestButtonElement = createElementComponent('paymentRequestButton', isServer);\n  /**\n   * Requires beta access:\n   * Contact [Stripe support](https://support.stripe.com/) for more information.\n   *\n   * @docs https://stripe.com/docs/stripe-js/react#element-components\n   */\n\n  var LinkAuthenticationElement = createElementComponent('linkAuthentication', isServer);\n  /**\n   * Requires beta access:\n   * Contact [Stripe support](https://support.stripe.com/) for more information.\n   *\n   * @docs https://stripe.com/docs/stripe-js/react#element-components\n   */\n\n  var AddressElement = createElementComponent('address', isServer);\n  /**\n   * @deprecated\n   * Use `AddressElement` instead.\n   *\n   * @docs https://stripe.com/docs/stripe-js/react#element-components\n   */\n\n  var ShippingAddressElement = createElementComponent('shippingAddress', isServer);\n  /**\n   * Requires beta access:\n   * Contact [Stripe support](https://support.stripe.com/) for more information.\n   *\n   * @docs https://stripe.com/docs/elements/cart-element\n   */\n\n  var CartElement = createElementComponent('cart', isServer);\n  /**\n   * @docs https://stripe.com/docs/stripe-js/react#element-components\n   */\n\n  var PaymentMethodMessagingElement = createElementComponent('paymentMethodMessaging', isServer);\n  /**\n   * @docs https://stripe.com/docs/stripe-js/react#element-components\n   */\n\n  var AffirmMessageElement = createElementComponent('affirmMessage', isServer);\n  /**\n   * @docs https://stripe.com/docs/stripe-js/react#element-components\n   */\n\n  var AfterpayClearpayMessageElement = createElementComponent('afterpayClearpayMessage', isServer);\n  exports.AddressElement = AddressElement;\n  exports.AffirmMessageElement = AffirmMessageElement;\n  exports.AfterpayClearpayMessageElement = AfterpayClearpayMessageElement;\n  exports.AuBankAccountElement = AuBankAccountElement;\n  exports.CardCvcElement = CardCvcElement;\n  exports.CardElement = CardElement;\n  exports.CardExpiryElement = CardExpiryElement;\n  exports.CardNumberElement = CardNumberElement;\n  exports.CartElement = CartElement;\n  exports.Elements = Elements;\n  exports.ElementsConsumer = ElementsConsumer;\n  exports.EpsBankElement = EpsBankElement;\n  exports.FpxBankElement = FpxBankElement;\n  exports.IbanElement = IbanElement;\n  exports.IdealBankElement = IdealBankElement;\n  exports.LinkAuthenticationElement = LinkAuthenticationElement;\n  exports.P24BankElement = P24BankElement;\n  exports.PaymentElement = PaymentElement;\n  exports.PaymentMethodMessagingElement = PaymentMethodMessagingElement;\n  exports.PaymentRequestButtonElement = PaymentRequestButtonElement;\n  exports.ShippingAddressElement = ShippingAddressElement;\n  exports.useCartElement = useCartElement;\n  exports.useCartElementState = useCartElementState;\n  exports.useElements = useElements;\n  exports.useStripe = useStripe;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}